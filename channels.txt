= Channels

Channels are FIFO queues that threads can use to coordinate their activities.

==| CreateChannel([capacity])

CreateChannel() returns a FIFO communication channel that can be used
to exchange information
between threads. Its optional argument is a capacity (positive integer). If
insufficient resources are available to create a channel, it returns -1. If the
capacity is not a positive integer, an error will be raised.

If a capacity is not provided, by default the channel can hold an indefinite
number of objects. Otherwise, attempts to store objects in the channel beyond
its capacity will block.

| gap> ch1:=CreateChannel();
| <channel 0x460339c: 0 elements, 0 waiting>
| gap> ch2:=CreateChannel(5); 
| <channel 0x460324c: 0/5 elements, 0 waiting>

==| SendChannel(channel, obj)

{|SendChannel|} accepts two arguments, a channel object returned by
{|CreateChannel|}, and an arbitrary GAP object. It stores {-obj-} in
{-channel-}. If {-channel-} has a finite capacity and is currently full,
then {|SendChannel|} will block until at least one element has been
removed from the channel, e.g. using {^ReceiveChannel^}.

{|SendChannel|} performs automatic region migration for thread-local
objects. If {-obj-} is thread-local for the current thread, it will be
migrated (along with all subobjects contained in the same region) to the
receiving thread's thread-local data space. In between sending and
receiving, {-obj-} cannot be accessed by either thread.

This example demonstrates sending messages acoss a channel.

| gap> ch1 := CreateChannel();
| gap> SendChannel(ch1,1);
| gap> ch1;
| <channel 0x460339c: 1 elements, 0 waiting>
| gap> ReceiveChannel(ch1); 
| 1
| gap> ch1;                   
| <channel 0x460339c: 0 elements, 0 waiting>

{|Sleep|} in the following example is used to demonstrate blocking.

| gap> ch2 := CreateChannel(5);;
| gap> ch3 := CreateChannel();;
| gap> for i in [1..5] do SendChannel(ch2,i); od;
| gap> ch2;
| <channel 0x460324c: 5/5 elements, 0 waiting>
| gap> t:=CreateThread(          
| > function()
| > local x;
| > Sleep(10);
| > x:=ReceiveChannel(ch2);
| > Sleep(10);
| > SendChannel(ch2,x);
| > Print("Thread finished\n");
| > end);;
| > SendChannel(ch3,3); # this blocks until the thread reads from ch3
| gap> ReceiveChannel(ch3); # the thread is blocked until we read from ch3
| 2
| Thread finished
| gap> WaitThread(t); 
| true

==| TransmitChannel(channel, obj)

{|TransmitChannel|} is identical to {|SendChannel|}, except that it
does not perform automatic region migration of thread-local objects.

| gap> ch := CreateChannel(channel);;
| gap> l := [ 1, 2, 3];
| gap> original_region := RegionOf(l);
| gap> SendChannel(ch, l);
| gap> WaitThread(CreateThread(function()
| >      local ob; ob := ReceiveChannel(ch);
| >      Display(RegionOf(ob) == original_region;
| >    end);
| false
| gap> l := [ 1, 2, 3];
| gap> original_region := RegionOf(l);
| gap> TransmitChannel(ch, l);
| gap> WaitThread(CreateThread(function()
| >      local ob; ob := ReceiveChannel(ch);
| >      Display(RegionOf(ob) == original_region;
| >    end);
| true


==| TrySendChannel(channel, obj)

{|TrySendChannel|} is identical to {|SendChannel|}, except that it
returns if the channel is full instead of blocking. It returns true
if the send was successful and false otherwise.

| gap> ch := CreateChannel(1);;
| gap> TrySendChannel(ch, 99);
| true
| gap> TrySendChannel(ch, 99);
| false

==| TryTransmitChannel(channel, obj)

{|TryTransmitChannel|} is identical to {|TrySendChannel|}, except that
it does not perform automatic region migration of thread-local objects.

==| ReceiveChannel(channel)

{|ReceiveChannel|} is used to retrieve elements from a channel. If
{-channel-} is empty, the call will block until an element has been
added to the channel via {|SendChannel|} or a similar primitive.

See {^SendChannel^} for an example.

==| TryReceiveChannel(channel, default)

{|TryReceiveChannel|}, like {|ReceiveChannel|}, attempts to retrieve
an object from {-channel-}. If it does not succeed, however, it will
return {-default-} rather than blocking.

| gap> ch := CreateChannel();;
| gap> SendChannel(ch, 99);
| gap> TryReceiveChannel(ch, fail);
| 99
| gap> TryReceiveChannel(ch, fail);
| fail


==| MultiSendChannel(channel, list)

{|MultiSendChannel|} allows the sending of all the objects contained
in the list {-list-} to {-channel-} as a single operation. The list
must be dense and is not modified byt he call. The function will
send elements starting at index 1 until all elements have been sent.
If a channel with finite capacity is full, then the operation will
block until all elements can be sent.

The operation is designed to be more efficient than sending all
elements individually via {|SendChannel|} by minimizing potentially
expensive concurrency operations.

See {^MultiReceiveChannel^} for an example.

==| TryMultiSendChannel(channel, list)

{|TryMultiSendChannel|} operates like {|MultiSendChannel|}, except
that it returns rather than blocking if it cannot send any more
elements if the channel is full. It returns the number of elements
it has sent. If {-channel-} does not have finite capacity,
{|TryMultiSendChannel|} will always send all elements in the list.

==| MultiReceiveChannel(channel, amount)

{|MultiReceiveChannel|} is the receiving counterpart to
{|MultiSendChannel|}. It will try to receive up to {-amount-}
objects from {-channel-}. If the channel contains less than
{-amount-} objects, it will return rather than blocking.

The function returns a list of all the objects received.

| gap> ch:=CreateChannel();;
| gap> MultiSendChannel(ch, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
| gap> MultiReceiveChannel(ch,7);
| [ 1, 2, 3, 4, 5, 6, 7 ]
| gap> MultiReceiveChannel(ch,7);
| [ 8, 9, 10 ]
| gap> MultiReceiveChannel(ch,7);
| [  ]

==| ReceiveAnyChannel(channel_1, ..., channel_n | channel_list)

{|ReceiveAnyChannel|} is a multiplexing variant of {|ReceiveChannel|}.
It blocks until at least one of the channels provided contains an
object. It will then retrieve that object from the channel and return
it.

| gap> ch1 := CreateChannel();;
| gap> ch2 := CreateChannel();;
| gap> SendChannel(ch2, [1, 2, 3]);;
| gap> ReceiveAnyChannel(ch1, ch2);
| [ 1, 2, 3 ]


==| ReceiveAnyChannelWithIndex(channel_1, ..., channel_n | channel_list)

{|ReceiveAnyChannelWithIndex|} works like {|ReceiveAnyChannel|}, except
that it returns a list with two elements, the first being the object
being received, the second being the number of the channel from which
the object has been retrieved.

| gap> ch1 := CreateChannel();;
| gap> ch2 := CreateChannel();;
| gap> SendChannel(ch2, [1, 2, 3]);;
| gap> ReceiveAnyChannelWithIndex(ch1, ch2);
| [ [ 1, 2, 3 ], 2 ]

