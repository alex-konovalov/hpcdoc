= Tasks

Tasks provide mid- to high-level functionality for programmers
to describe asynchronous workflows. A task is an asynchronously
or synchronously executing job; functions exist to create tasks
that are executed concurrently, on demand, or in the current
thread; to wait for their completion, check their status, and
retrieve any results.

Here is a simple example of sorting a list in the background:

| gap> task := RunTask(x -> SortedList(x), [3,2,1]);;
| gap> WaitTask(task);
| gap> TaskResult(task);
| [ 1, 2, 3 ]

{^RunTask^} dispatches a task to run in the background; a task
is described by a function and zero or more arguments that are
passed to {^RunTask^}. {^WaitTask^} waits for the task to complete;
and {|TaskResult|} returns the result of the task.

{^TaskResult^} does an implicit {^WaitTask^}, so the second line
above can actually be omitted:

| gap> task := RunTask(x -> SortedList(x), [3,2,1]);;
| gap> TaskResult(task);
| [ 1, 2, 3 ]

It is simple to run two tasks in parallel. Let's compute the factorial
of 10000 by splitting the work between two tasks:

| gap> task1 := RunTask(Product, [1..5000]);;
| gap> task2 := RunTask(Product, [5001..10000]);;
| gap> TaskResult(task1) * TaskResult(task2) = Factorial(10000);
| true

You can use {^DelayTask^} to delay executing the task until
its result is actually needed.

| gap> task1 := DelayTask(Product, [1..5000]);;
| gap> task2 := DelayTask(Product, [5001..10000]);;
| gap> WaitTask(task1, task2);
| gap> TaskResult(task1) * TaskResult(task2) = Factorial(10000);
| true

Note that {^WaitTask^} is used here to start execution of both tasks;
otherwise, {|task2|} would not be started until {|TaskResult(task1)|}
has been evaluated.

To start execution of a delayed task, you can also use {|ExecuteTask|}.
This has no effect if a task has already been running.

For convenience, you can also use {^ImmediateTask^} to execute a task
synchronously (i.e., the task is started immediately and the call does
not return until the task has completed).

| gap> task := ImmediateTask(x -> SortedList(x), [3,2,1]);;
| gap> TaskResult(task);
| [ 1, 2, 3 ]

This is indistinguishable from calling the function directly, but
provides the same interface as normal tasks.

Sometimes it can be useful to ignore the result of a task. The
{|RunAsyncTask|} provides the necessary functionality.

| gap> RunAsyncTask(function() Print("Hello, world!\n"); end);
| Hello, world!

Such a task cannot be waited for and its result (if any) is ignored.

Task arguments are generally copied so that both the task that created
them and the task that uses them can access the data concurrently
without fear of race conditions. To avoid copying, arguments should be
made shared or public (see the relevant parts of the section on {?regions?});
shared and public arguments will not be copied.

HPC-GAP currently has multiple implementations of the task API. To
enable the reference implementation, set the environment variable
GAP_STDTASKS to a non-empty value before starting GAP.

== Running tasks

===| RunTask(func [, arg1, ..., argn])

{|RunTask|} prepares a task for execution and starts it. The task will
call the function {-func-} with arguments {-arg1-} through {-argn-} (if
provided). The return value of {-func-} is the result of the task.

The {|RunTask|} call itself returns a task object that can be used by
functions that expect a task argument.

===| ScheduleTask(condition, func, [, arg1, ..., argn])

{|ScheduleTask|} prepares a task for execution, but, unlike {|RunTask|}
does not start it until {-condition-} is met. See {^Conditions^} on
how to construct conditions. Simple examples of conditions are
individual tasks (execution occurs after the task completes) or
lists of tasks (execution occurs after all tasks in the list complete).

| gap> t1 := RunTask(x->x*x, 3);;
| gap> t2 := RunTask(x->x*x, 4);;
| gap> t := ScheduleTask([t1, t2], function()
|             return TaskResult(t1) + TaskResult(t2);
|      end);
| gap> TaskResult(t);
| 25

While the above example could also be achieved with {|RunTask|} in
lieu of {|ScheduleTask|}, since {|TaskResult|} would wait for {|t1|}
and {|t2} to complete, the above implementation does not actually
start the final task until the others are complete, making it more
efficient, since no additional worker thread needs to be occupied.

===| DelayTask(func [, arg1, ..., argn])

{|DelayTask|} works as {^RunTask^}, but its start is delayed until
it is being waited for (including implicitly by calling {^TaskResult^}).

===| RunAsyncTask(func [, arg1, ..., argn])

{|RunAsyncTask|} creates an asynchronous task. It works like {^RunTask^},
except that its result will be ignored.

===| ScheduleAsyncTask(condition, func, [, arg1, ..., argn])

{|ScheduleAsyncTask|} creates an asynchronous task. It works like
{^ScheduleTask^}, except that its result will be ignored.

===| MakeTaskAsync(task)

{|MakeTaskAsync|} turns a synchronous task into an asynchronous task
that cannot be waited for and whose result will be ignored.

===| ImmediateTask(func [, arg1, ..., argn])

{|ImmediateTask|} executes the task specified by its arguments
synchronously, usually within the current thread.

===| ExecuteTask(task)

{|ExecuteTask|} starts {-task-} if it is not already running. It has
only an effect if its argument is a task returned by {^DelayTask^};
otherwise, it is a no-op.

===| WaitTask(task1, ..., taskn)
===| WaitTask(condition)

{|WaitTask|} waits until {-task1-} through {-taskn-} have completed;
after that, it returns.

Alternatively, a condition can be passed to {|WaitTask|} in order to
wait until a condition is met. See {^Conditions^} on how to construct
conditions.

===| WaitTasks(task1, ..., taskn)

{|WaitTasks|} is an alias for {|WaitTask|}.

===| WaitAnyTask(task1, ..., taskn)

The {|WaitAnyTask|} function waits for any of its arguments to finish,
then returns the number of that task.

| gap> task1 := DelayTask(x->SortedList(x), [3,2,1]);;
| gap> task2 := DelayTask(x->SortedList(x), [6,5,4]);;
| gap> which := WaitAnyTask(task1, task2);
| 2
| gap> if which = 1 then
| >      Display(TaskResult(task1);Display(TaskResult(task2);
| >    else
| >      Display(TaskResult(task2);Display(TaskResult(task1);
| >    fi;
| [ 4, 5, 6 ]
| [ 1, 2, 3 ]

One can pass a list of tasks to {|WaitAnyTask|} as an argument;
{|WaitAnyTask([task1, ..., taskn])|} behaves identically to
{|WaitAnyTask(task1, ..., taskn)|}.

===| TaskResult(task)

The {|TaskResult|} function returns the result of a task. It implicitly
does a {|WaitTask(task)|} if that is necessary. Multiple invocations of
{|TaskResult|} with the same task argument will not do repeated waits
and always return the same value.

===| CurrentTask()

The {|CurrentTask|} returns the currently running task.

===| RunningTasks()

This function returns the number of currently running tasks. Note that
it is only an approximation and can change as new tasks are being
started by other threads.

===| TaskStarted(task)

This function returns true if the task has started executing (i.e., for
any non-delayed task), false otherwise.

===| TaskFinished(task)

This function returns true if the task has finished executing and its
result is available, false otherwise.

===| TaskIsAsync(task)

This function returns true if the task is asynchronous, true otherwise.

===| CullIdleTasks()

This function terminates unused worker threads.

== Cancelling tasks

HPC-GAP uses a cooperative model for task cancellation. A programmer
can request the cancellation of another task, but it is up to that
other task to actually terminate itself. The tasks library has functions
to request cancellation, to test for the cancellation state of a task,
and to perform actions in response to cancellation requests.

===| CancelTask(task)

{|CancelTask|} submits a request that {-task-} is to be cancelled.

===| TaskCancellationRequested(task)

{|TaskCancellationRequested|} returns true if {|CancelTask|} has been
called for {-task-}, false otherwise.

===| OnTaskCancellation(exit_func)

{|OnTaskCancellation|} tests if cancellation for the current task
has been requested. If so, then {-exit_func-} will be called (as a
parameterless function) and the current task will be aborted. The
result of the current task will be the value of {|exit_func()|}.

Example:

| gap> task := RunTask(function()
| >      while true do
| >        OnTaskCancellation(function() return 314; end);
| >      od;
| >    end);
| gap> CancelTask(task);
| gap> TaskResult(task);
| 314

===| OnTaskCancellationReturn(value)

{|OnTaskCancellationReturn|} is a convenience function that does
the same as:

| OnTaskCancellation(function() return value; end);

== Conditions

{|ScheduleTask|} and {|WaitTask|} can be made to wait on more complex
conditions than just tasks. A condition is either a milestone, a task,
or a list of milestones and tasks. {|ScheduleTask|} starts its task
and {|WaitTask|} returns when the condition has been met. A condition
represented by a task is met when the task has completed. A condition
represented by a milestone is met when the milestone has been achieved
(see below). A condition represented by a list is met when all
conditions in the list have been met.

== Milestones

Milestones are a way to represent abstract conditions to which multiple
tasks can contribute.

===| NewMilestone([list])

The {|NewMilestone|} function creates a new milestone. Its argument is
a list of targets, which must be a list of integers and/or strings. If
omitted, the list defaults to {|[0]|}.

===| ContributeToMilestone(milestone, target)

The {|ContributeToMilestone|} milestone function contributes the
specified target to the milestone. Once all targets have been contributed
to a milestone, it has been achieved.

===| AchieveMilestone(milestone)

The {|AchieveMilestone|} function allows a program to achieve a milestone
in a single step without adding individual targets to it. This is most
useful in conjunction with the default value for {|NewMilestone|}, e.g.

| gap> m := NewMilestone();;
| gap> AchieveMilestone(m);

===| IsAchievedMilestone(milestone)

The {|IsAchievedMilestone|} tests explicitly if a milestone has been
achieved. It returns {|true|} on success, {|false|} otherwise.

| gap> m := NewMilestone([1,2]);;
| gap> ContributeToMilestone(m, 1);
| gap> IsAchievedMilestone(m);
| false
| gap> ContributeToMilestone(m, 2);
| gap> IsAchievedMilestone(m);
| true
